for i, (ratio, X_train, X_test, y_train, y_test) in enumerate(split_datasets):
    # vẽ phân bố class
    fig, axes = plt.subplots(1, 2, figsize=(8, 4))
    sns.countplot(x=y_train, ax=axes[0])
    axes[0].set_title(f"Train set ({round(ratio*100)}%)")
    sns.countplot(x=y_test, ax=axes[1])
    axes[1].set_title(f"Test set ({round((1-ratio)*100)}%)")
    print(f"================================================= {round(ratio*100)}/{round((1-ratio)*100)} split =================================================")
    plt.suptitle(f"Class distribution for {round(ratio*100)}/{round((1-ratio)*100)} split", fontsize=16)
    plt.tight_layout()
    plt.show()

    # đánh giá mô hình và vẽ confusion matrix
    clf = DecisionTreeClassifier(criterion="entropy", random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(f"================= Split ratio {round(ratio*100)}/{round((1 - ratio)*100)} =================")
    print(classification_report(y_test, y_pred, target_names=['No Disease', 'Disease']))
    cm = confusion_matrix(y_test, y_pred)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['No Disease', 'Disease'])
    fig, ax = plt.subplots(figsize=(5, 4))
    disp.plot(ax=ax, cmap='Blues', values_format='d')
    ax.set_title(f'Confusion Matrix (Depth={clf.get_depth()}, {round(ratio*100)}/{round((1 - ratio)*100)} Split)')
    plt.show()
    print("===============================================================================================================")